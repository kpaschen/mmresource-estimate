- name: Find or create instances
  hosts: localhost
  tasks:
    - include_vars: vars.yml

    - name: identify availability zones for current region
      amazon.aws.aws_az_info:
      register: az_info

    - set_fact:
         chosen_az: "{{ az_info.availability_zones | random }}"

    - name: find vpcs
      amazon.aws.ec2_vpc_net_info:
      register: vpc_info

    - set_fact:
         vpc_id: "{{ vpc_info | community.general.json_query('vpcs[?is_default==`true`].vpc_id') | first }}"

    - name: find subnets
      amazon.aws.ec2_vpc_subnet_info:
         filters:
            vpc-id: "{{ vpc_id }}"
            availability-zone: "{{ chosen_az.zone_name }}"
      register: subnet_info

    - set_fact:
         chosen_subnet: "{{ subnet_info.subnets | first }}"

    - name: find database instance
      amazon.aws.ec2_instance_info:
        filters:
          "tag:Name": "kathrin-mmdb-instance"
          "tag:Application": "mattermost"
          "tag:User": "kathrin"
          "tag:Purpose": "database"
      register: db_instance_info

    - set_fact:
         db_instance_state: "{{ db_instance_info | community.general.json_query('instances[*].state.name') }}"

    - set_fact:
         db_instance_subnet: "{{ db_instance_info | community.general.json_query('instances[*].subnet_id') }}"

    - name: print db subnet
      debug:
         msg: "{{ db_instance_subnet | first or chosen_subnet.subnet_id }}"

    - set_fact:
         db_instance_id: "{{ db_instance_info | community.general.json_query('instances[*].instance_id') | first }}"

    - name: create database instance
      amazon.aws.ec2_instance:
        name: "kathrin-mmdb-instance"
        state: started
        exact_count: 1
        filters:
          "tag:Name": "kathrin-mmdb-instance"
          "instance-state-name": "running"
        vpc_subnet_id : "{{ db_instance_subnet | first or chosen_subnet.subnet_id }}"
        instance_type: t2.micro
        image_id: "ami-065deacbcaac64cf2" 
        detailed_monitoring: yes
        instance_role: logstreamers
        tags:
           Application: mattermost
           User: kathrin
           Purpose: database

    - name: create mattermost instance
      amazon.aws.ec2_instance:
        name: "kathrin-mm-instance"
        state: started
        exact_count: 1
        filters:
          "tag:Name": "kathrin-mm-instance"
          "instance-state-name": "running"
        vpc_subnet_id : "{{ db_instance_subnet | first or chosen_subnet.subnet_id }}"
        instance_type: t2.micro
        image_id: "ami-065deacbcaac64cf2" 
        detailed_monitoring: yes
        instance_role: logstreamers
        tags:
           Application: mattermost
           User: kathrin
           Purpose: mattermost

    - name: find instance ids
      amazon.aws.ec2_instance_info:
        filters:
          "tag:Application": "mattermost"
          "tag:User": "kathrin"
      register: instance_info

    - set_fact:
         instance_ids: "{{ instance_info | community.general.json_query('instances[*].instance_id') }}"


# It would be nice to attach alarms to these instances so they get taken
# down automatically if they've been unused for a bit.
# But it looks as though if an instance goes from stopped to started,
# the timeseries that goes into the cpu utilization metric does not get
# started afresh, so the instance always looks like it qualifies for the
# alarm immediately.
#    - set_fact: 
#         stop_action: "arn:aws:automate:{{ chosen_az.region_name }}:ec2:stop"
#
#    - name: create alarms
#      ec2_metric_alarm:
#         state: present
#         name: "unused-instance:{{ item }}"
#         region: "{{ chosen_az.region_name }}"
#         metric: "CPUUtilization"
#         namespace: "AWS/EC2"
#         statistic: Average
#         comparison: LessThanOrEqualToThreshold
#         threshold: 10.0 
#         period: 3600
#         evaluation_periods: 2
#         unit: "Percent"
#         dimensions: {'InstanceId': "{{ item }}" }
#         alarm_actions: [ "{{ stop_action }}" ]
#         description: "instance appears unused"
#      loop: "{{ instance_ids }}"


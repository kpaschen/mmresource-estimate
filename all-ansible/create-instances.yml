- name: Find or create instances
  hosts: localhost
  tasks:
    - include_vars: vars.yml

    - name: get localhost's public ip address
      shell:
         cmd: "dig +short txt ch whoami.cloudflare @1.0.0.1"
      register: dig_localhost

    - name: show ip
      debug:
         msg: '{{ dig_localhost.stdout[1:-1] }}'

    - set_fact:
         public_ip: "{{ dig_localhost.stdout[1:-1] }}"

    - name: find or create key pair
      amazon.aws.ec2_key:
         name: "kathrin-mm-key-pair"
         force: false
         key_type: ed25519
         tags:
           Application: mattermost
           User: kathrin
      register: generated_key

    - name: identify availability zones for current region
      amazon.aws.aws_az_info:
      register: az_info

    - set_fact:
         chosen_az: "{{ az_info.availability_zones | random }}"

    - name: find vpcs
      amazon.aws.ec2_vpc_net_info:
      register: vpc_info

    - set_fact:
         vpc_id: "{{ vpc_info | community.general.json_query('vpcs[?is_default==`true`].vpc_id') | first }}"

    - name: find subnets
      amazon.aws.ec2_vpc_subnet_info:
         filters:
            vpc-id: "{{ vpc_id }}"
            availability-zone: "{{ chosen_az.zone_name }}"
      register: subnet_info

    - set_fact:
         chosen_subnet: "{{ subnet_info.subnets | first }}"

    - name: ensure security group exists
      amazon.aws.ec2_group:
         vpc_id: "{{ vpc_id }}"
         name: "kathrin-mm-security-group"
         description: "permit ingress and egress for the mattermost instance"
         tags:
            Application: mattermost
            User: kathrin
         rules:
            - proto: tcp
              ports: [80]
              rule_desc: "allow incoming traffic to port 80"
              group_name: "kathrin-mm-security-group"
            - proto: tcp
              ports: [22]
              rule_desc: "allow incoming ssh connection"
              cidr_ip: "{{ public_ip }}/32"
            - proto: tcp
              ports: [5468]
              rule_desc: "allow incoming traffic to database"
              group_name: "kathrin-mm-security-group"
         egress_rules:
            - proto: tcp
              rule_desc: "allow traffic to database"
              ports: [5468]
              group_name: "kathrin-mm-security-group"
            
    - name: find database instance
      amazon.aws.ec2_instance_info:
        filters:
          "tag:Name": "kathrin-mmdb-instance"
          "tag:Application": "mattermost"
          "tag:User": "kathrin"
          "tag:Purpose": "database"
      register: db_instance_info

    - set_fact:
         db_instance_state: "{{ db_instance_info | community.general.json_query('instances[*].state.name') }}"

    - set_fact:
         db_instance_subnets: "{{ db_instance_info | community.general.json_query('instances[*].subnet_id') }}"

    - set_fact:
         db_instance_subnet: "{% if db_instance_subnets!=[] %}{{ db_instance_subnets | first }}{% else %}{{ chosen_subnet.subnet_id }}{% endif %}"

    - name: create database instance
      amazon.aws.ec2_instance:
        name: "kathrin-mmdb-instance"
        state: started
        exact_count: 1
        filters:
          "tag:Name": "kathrin-mmdb-instance"
          "instance-state-name": "running"
        key_name: "kathrin-mm-key-pair"
        security_group: "kathrin-mm-security-group"
        vpc_subnet_id : "{{ db_instance_subnet }}"
        instance_type: t2.micro
        image_id: "ami-065deacbcaac64cf2" 
        detailed_monitoring: yes
        instance_role: logstreamers
        tags:
           Application: mattermost
           User: kathrin
           Purpose: database

    - name: create mattermost instance
      amazon.aws.ec2_instance:
        name: "kathrin-mm-instance"
        state: started
        exact_count: 1
        key_name: "kathrin-mm-key-pair"
        security_group: "kathrin-mm-security-group"
        filters:
          "tag:Name": "kathrin-mm-instance"
          "instance-state-name": "running"
        vpc_subnet_id : "{{ db_instance_subnet }}"
        instance_type: t2.micro
        image_id: "ami-065deacbcaac64cf2" 
        detailed_monitoring: yes
        instance_role: logstreamers
        tags:
           Application: mattermost
           User: kathrin
           Purpose: mattermost

    - name: find instance ids
      amazon.aws.ec2_instance_info:
        filters:
          "tag:Application": "mattermost"
          "tag:User": "kathrin"
      register: instance_info

    - set_fact:
         instance_ids: "{{ instance_info | community.general.json_query('instances[*].instance_id') }}"


